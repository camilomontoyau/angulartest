{
	"swagger":"2.0",
	"info":{
		"description":"Swagger documentation for user-service rest API",
		"version":"0.0.1",
		"title":"Library API",
		"termsOfService":"http://swagger.io/terms/",
		"contact":{
			"email":"camilomontoya2@gmail.com"
		},
		"license":{
			"name":"Apache 2.0",
			"url":"http://www.apache.org/licenses/LICENSE-2.0.html"
		}
	},
	"host":"localhost:9000",
	"basePath":"/api/v0",
	"tags":[
		{
			"name":"Books",
			"description":"Crud operations over books"
		},
		{
			"name":"Authors",
			"description":"Crud operations over authors"
		}
	],
	"schemes":[
		"http"
	],
	"paths":{
		"/books":{
			"get":{
				"tags":[
					"Books"
				],
				"summary":"Returns an Array of books",
				"description":"This endpoint returns a list of book objects",
				"operationId":"booksList",
				"consumes":[
					"application/json",
					"application/xml"
				],
				"produces":[
					"application/xml",
					"application/json"
				],
				"parameters":[

				],
				"responses":{
					"403":{
						"description":"Failed to verify token or token not provided."
					},
					"200":{
						"description":"Returns Array of book objects"
					}
				}
			},
			"post":{
				"tags":[
					"Books"
				],
				"summary":"Creates a Book",
				"description":"With this endpoint you can create a Book",
				"operationId":"booksCreate",
				"consumes":[
					"application/json",
					"application/xml"
				],
				"produces":[
					"application/xml",
					"application/json"
				],
				"parameters":[
					{
						"in":"body",
						"name":"body",
						"description":"Book Object",
						"required":true,
						"schema":{
							"$ref":"#/definitions/BookPost"
						}
					}
				],
				"responses":{
					"403":{
						"description":"Failed to verify token or token not provided."
					},
					"201":{
						"description":"Book is created, and returns the current Book"
					},
					"400":{
						"description":"Error because a mandatory property is missed, or other user Error"
					}
				}
			}
		},
		"/books/{bookId}":{
			"get":{
				"tags":[
					"Books"
				],
				"summary":"Get a Book record",
				"description":"This returns a Book object putting its bookId in the path",
				"operationId":"booksFindById",
				"consumes":[
					"application/json",
					"application/xml"
				],
				"produces":[
					"application/xml",
					"application/json"
				],
				"parameters":[
					{
						"name":"bookId",
						"in":"path",
						"required":true,
						"description":"ID of book that needs to be updated",
						"type":"string"
					}
				],
				"responses":{
					"403":{
						"description":"Failed to verify token or token not provided."
					},
					"200":{
						"description":"Returns a book object"
					},
					"404":{
						"description":"if the book is not found"
					},
					"500":{
						"description":"If Cast to ObjectId failed for value or internal server error"
					}
				}
			},
			"put":{
				"tags":[
					"Books"
				],
				"summary":"Update a book",
				"description":"With this endpoint you can update a book object",
				"operationId":"booksUpdate",
				"consumes":[
					"application/json",
					"application/xml"
				],
				"produces":[
					"application/xml",
					"application/json"
				],
				"parameters":[
					{
						"in":"body",
						"name":"body",
						"description":"Book Object",
						"required":true,
						"schema":{
							"$ref":"#/definitions/BookPost"
						}
					},
					{
						"name":"bookId",
						"in":"path",
						"required":true,
						"description":"ID of book that needs to be updated",
						"type":"string"
					}
				],
				"responses":{
					"403":{
						"description":"Failed to verify token or token not provided."
					},
					"200":{
						"description":"Book is created, and returns the current Book"
					},
					"400":{
						"description":"Error because a mandatory property is missed, or other user Error"
					},
					"404":{
						"description":"if the book is not found"
					},
					"500":{
						"description":"If Cast to ObjectId failed for value or internal server error"
					}
				}
			},
			"delete":{
				"tags":[
					"Books"
				],
				"summary":"Deletes a book record",
				"description":"Deletes a book record with its ID",
				"operationId":"booksDelete",
				"consumes":[
					"application/json",
					"application/xml"
				],
				"produces":[
					"application/xml",
					"application/json"
				],
				"parameters":[
					{
						"name":"bookId",
						"in":"path",
						"required":true,
						"description":"ID of book that needs to be updated",
						"type":"string"
					}
				],
				"responses":{
					"403":{
						"description":"Failed to verify token or token not provided."
					},
					"204":{
						"description":"The book was deleted successfully"
					},
					"404":{
						"description":"if the book is not found"
					},
					"500":{
						"description":"If Cast to ObjectId failed for value or internal server error"
					}
				}
			}
		},
		"/authors":{
			"get":{
				"tags":[
					"Authors"
				],
				"summary":"Returns an Array of Authors",
				"description":"This endpoint returns a list of Author objects",
				"operationId":"authorsList",
				"consumes":[
					"application/json",
					"application/xml"
				],
				"produces":[
					"application/xml",
					"application/json"
				],
				"parameters":[

				],
				"responses":{
					"403":{
						"description":"Failed to verify token or token not provided."
					},
					"200":{
						"description":"Returns Array of book objects"
					}
				}
			},
			"post":{
				"tags":[
					"Authors"
				],
				"summary":"Creates an Author",
				"description":"With this endpoint you can create an Author",
				"operationId":"authorsCreate",
				"consumes":[
					"application/json",
					"application/xml"
				],
				"produces":[
					"application/xml",
					"application/json"
				],
				"parameters":[
					{
						"in":"body",
						"name":"body",
						"description":"Author Object",
						"required":true,
						"schema":{
							"$ref":"#/definitions/AuthorPost"
						}
					}
				],
				"responses":{
					"403":{
						"description":"Failed to verify token or token not provided."
					},
					"201":{
						"description":"Author is created, and returns the current Author"
					},
					"400":{
						"description":"Error because a mandatory property is missed, or other user Error"
					}
				}
			}
		},
		"/authors/{authorId}":{
			"get":{
				"tags":[
					"Authors"
				],
				"summary":"Get an Author record",
				"description":"This returns an Author object putting its authorId in the path",
				"operationId":"authorsFindById",
				"consumes":[
					"application/json",
					"application/xml"
				],
				"produces":[
					"application/xml",
					"application/json"
				],
				"parameters":[
					{
						"name":"authorId",
						"in":"path",
						"required":true,
						"description":"ID of author that needs to be queried",
						"type":"string"
					}
				],
				"responses":{
					"403":{
						"description":"Failed to verify token or token not provided."
					},
					"200":{
						"description":"Returns a author object"
					},
					"404":{
						"description":"if the author is not found"
					},
					"500":{
						"description":"If Cast to ObjectId failed for value or internal server error"
					}
				}
			},
			"put":{
				"tags":[
					"Authors"
				],
				"summary":"Update an Author",
				"description":"With this endpoint you can update an Author object",
				"operationId":"authorsUpdate",
				"consumes":[
					"application/json",
					"application/xml"
				],
				"produces":[
					"application/xml",
					"application/json"
				],
				"parameters":[
					{
						"in":"body",
						"name":"body",
						"description":"Author Object",
						"required":true,
						"schema":{
							"$ref":"#/definitions/AuthorPost"
						}
					},
					{
						"name":"authorId",
						"in":"path",
						"required":true,
						"description":"ID of author that needs to be updated",
						"type":"string"
					}
				],
				"responses":{
					"403":{
						"description":"Failed to verify token or token not provided."
					},
					"200":{
						"description":"author is updated, and returns the current author"
					},
					"400":{
						"description":"Error because a mandatory property is missed, or other user Error"
					},
					"404":{
						"description":"if the author is not found"
					},
					"500":{
						"description":"If Cast to ObjectId failed for value or internal server error"
					}
				}
			},
			"delete":{
				"tags":[
					"Authors"
				],
				"summary":"Deletes an Author record",
				"description":"Deletes a Author record with its ID",
				"operationId":"authorDelete",
				"consumes":[
					"application/json",
					"application/xml"
				],
				"produces":[
					"application/xml",
					"application/json"
				],
				"parameters":[
					{
						"name":"authorId",
						"in":"path",
						"required":true,
						"description":"ID of author that needs to be updated",
						"type":"string"
					}
				],
				"responses":{
					"403":{
						"description":"Failed to verify token or token not provided."
					},
					"204":{
						"description":"The author was deleted successfully"
					},
					"404":{
						"description":"if the author is not found"
					},
					"500":{
						"description":"If Cast to ObjectId failed for value or internal server error"
					}
				}
			}
		}
	},
	"securityDefinitions":{
		"api_key":{
			"type":"apiKey",
			"name":"api_key",
			"in":"header"
		}
	},
	"definitions":{
		"BookPost":{
			"type":"object",
			"required":[
				"title",
				"description",
				"image",
				"authorId"
			],
			"properties":{
				"title":{
					"type":"string",
					"example":"The lord of the rings"
				},
				"description":{
					"type":"string",
					"example":"This is a description example"
				},
				"image":{
					"type":"string",
					"example":"Image url"
				},
				"authorId":{
					"type":"string",
					"example":"Author ID"
				}

			},
			"xml":{
				"name":"Book"
			}
		},
		"AuthorPost":{
			"type":"object",
			"required":[
				"name",
				"nationality",
				"authorId"
			],
			"properties":{
				"name":{
					"type":"string",
					"example":"Stephen King"
				},
				"nationality":{
					"type":"string",
					"example":"American"
				},
				"authorId":{
					"type":"string",
					"example":"Author ID"
				}

			},
			"xml":{
				"name":"Author"
			}
		}
	},
	"externalDocs":{
		"description":"Find out more about Swagger",
		"url":"http://swagger.io"
	}
}